<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[终极狼人开发日志]]></title>
    <url>%2F2017%2F10%2F19%2F%E7%BB%88%E6%9E%81%E7%8B%BC%E4%BA%BA%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[2017.10.18 准备建立一个serviceTcp长连接 2017.10.19 长连接的service转备好了，接下来要处理两个问题 APP对某些手机不兼容，应该是加载图片导致的ANR，需要解决。 服务端莫名卡死。 2017.10.20 准备整合语音功能。兼容性待解决、服务端集合有问题，换框架也许会好。]]></content>
      <categories>
        <category>CS/EE</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[回调函数]]></title>
    <url>%2F2017%2F10%2F19%2F%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[虽然平时在很多地方（如各种Listener/监听器模式一类的）都有接触回调函数，但自己始终也没有彻底的搞明白，这两天学习了一下，那么就说一下自己对回调函数的理解好了。 回调函数的大概定义 在计算机程序设计中，回调函数，或简称回调，是指通过函数参数传递到其它代码的，某一块可执行代码的引用。这一设计允许了底层代码调用在高层定义的子程序。 这应该是来自维基百科的定义,那么对于Java，我们会采用接口来实现回调。这里也是接口的一个很完美的应用处我们也可以通过回调的例子来理解一下接口。 回调到底是做什么的 以我目前的理解来说的话，回调的一大目的就是让A段程序可以调用可能很久以后或是一个毫无关联的B段程序写出来的方法。那么你肯定会有疑问，我写了A段程序的时候，B可能还没被写出来，或者我根本不知道写B程序的那个人会给我什么样的具体方法让我调用，那我怎么办呢？这时候接口 Interface 的作用就体现出来了。A程序可以利用接口来对自己准备调用的来自B的函数做一个规范（例如函数名，暂时叫c好了）。那么A只需要在自己内部调用一个接口对象c的方法，并且给B留一个参数为该接口函数，当B实现对应接口的时候，必然要重写c方法，B此时可以利用A留给自己的函数把自己实现的这个接口传回给A，从而A可以调用来自这个参数的，由B完成的c方法。 总结起来就是:定接口的负责何时执行与用来干什么，用回调的负责执行的内容。 废话太多，放代码了12345678910111213141516171819202122232425262728293031323334353637383940414243public interface C &#123; void c(String myC); //规定C接口的c方法，用来让A调用，让B重写&#125;----------------------------------------------------------------------------public class A &#123; C myC; //定义一个C的引用用来接收来自B的参数 public void a(String a)&#123; myC.c(a); //在某个需要的时候，即可调用c();方法，此方法会被B类重写 &#125; public void setC(C myC)&#123; this.myC = myC; //此函数用来让B传递自己实现的C接口（包含了自己重写的方法） &#125;&#125;----------------------------------------------------------------------------public class B implements C&#123; //当然会让B实现C接口重写c方法，这样当B被传入A的setC()方法的时候，A就能调用B写出来的函数了 @Override public void c(String myC) &#123; System.out.println(&quot;可以随便完成些什么&quot;+myC); &#125;&#125;----------------------------------------------------------------------------public class Test &#123; public static void main(String[] args) &#123; A a = new A(); a.setC(new B()); a.a(); //传入后，A中实现的c方法就是被B重写的了！ &#125; &#125; ----------------------------------------------------------------------------//当然了，很多时候也可以通过匿名内部类来调用回调如经典的监听器button.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; &#125;&#125;); 最后 回调的技巧还用于Android开发的 Service与Activity通信的时候，利用回调的原理，在Service需要的时候，在其内部调用Activity重写的方法（如更新UI等），即可完成向Activity通信了。 另附一篇在我学习这部分的过程中让我受益匪浅的博客: 回调函数透彻理解Java]]></content>
      <categories>
        <category>CS/EE</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心绪紊乱，整理下思路吧。]]></title>
    <url>%2F2017%2F10%2F19%2F%E5%BF%83%E7%BB%AA%E7%B4%8A%E4%B9%B1%EF%BC%8C%E6%95%B4%E7%90%86%E4%B8%8B%E6%80%9D%E8%B7%AF%E5%90%A7%E3%80%82%2F</url>
    <content type="text"><![CDATA[又鸽了自己很久了，Markdown语法都有点忘了，这两天有些心烦意乱，写点东西整理下思路吧。 今晚基本搞明白了回调函数。确实很有用。 最近心理状态也不是很好，希望明天不要想这么多杂七杂八的事情了。 有点晚了，明早再补全。希望能在零点前躺倒床上。 10-18 23:40 这里是第二天十月十九日的下午三点五十七分。本来想着不太忙的话写一下狼人杀，可惜偏偏今天突然多了很多事情，在公司采集数据到刚才，大哥又给我打电话说产品下周就要用，要赶快。。看来有的忙了，但毕竟决定了每天都要写的，所以昨晚拖到现在的这篇文章不能拖到今晚了。。 那么接下来准备在这里做两件事，一个是总结一下刚学到的回调函数。二是开一个狼人杀开发日志的坑。好了，今天心理状态还不错，就不废话了。开两篇新文章去。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>Anything</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[First（测试简单Markdown语法）]]></title>
    <url>%2F2017%2F07%2F04%2FFirst%2F</url>
    <content type="text"><![CDATA[简单的配置好博客后提交了这篇测试空文档迟迟未动，近来算是稳定下来了，那么就随便写点什么吧。 标题与列表等标题 添加标题的话十分简单，只需要加”#”就好啦！加多少”#”就意味着这是几级标题，正如此处。另外在所有的标签后一般都要跟一个空格。 列表 列表的话，加”*“加空格就可以添加无序列表，而直接”1.,2.,3.”加空格就可以添加有序列表了（另，\右划线为转义字符）效果如下 搞事情 搞事情1 搞事情2233333 其他的什么 象DOTA2的命令轮盘，加”&gt;”就可以实现引用效果了(记得前后加入空白行)，如下 相当精彩的比赛! 图片与链接插入图片 插入图片的格式是“![图片关键字](图片链接)”此处图片可以使用图床或相对路径,在source文件夹中新建一个images文件夹，然后把图片放在images文件夹里。，图片放进去后“![图片关键字](/images/X.png)”，如下 插入链接 与插入图片很像，要插入链接只需要去掉感叹号就好，格式如下”[链接名](链接)”这里放一个友情博客链接教大家如何搭建Hexo博客吧~ Vivi的博客 字体、表格、分割线与代码框粗体与斜体 Markdown 的粗体和斜体也非常简单，用两个 “*“ 包含一段文本就是粗体的语法，用一个 “*“ 包含一段文本就是斜体的语法。如下： Markdown Markdown 表格 表格感觉像是在画画啊，大概是这样的： 12345| 列1 | 列2 | 列3 || ------------|:-------------:| -----:|| 11 | 12 | 13 || 21 | 22 | 23 || 31 | 32 | 33 | 列1 列2 列3 11 12 13 21 22 23 31 32 33 大概是上面的效果 分割线 分割线的语法只需要另起一行，连续输入三个星号 “***“ 就好了！ 代码框 如果需要在文章里优雅的引用代码框，在 Markdown 下实现也非常简单，只需要用三个 `(波浪键) 把中间的代码包裹起来,如下面的Java Main方法：直接用”`“包裹的话可以实现这样的单行效果这里是符号内的文字。 12345public class Test&#123; public static void main(String[] args)&#123; &#125;&#125; 还有一点是可以通过加两个全角空格的方式来完成首行缩进。嗯，以上。 大概的常用功能就是这样了~开始愉快的写文章吧！]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>Anything</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F07%2F04%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>